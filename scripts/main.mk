#
# Copyright 2005 Timo Hirvonen <tihirvon@ee.oulu.fi>
#
# This file is licensed under the GPLv2.

ifndef top_srcdir
$(error top_srcdir not defined)
endif

ifndef top_builddir
$(error top_builddir not defined)
endif

ifndef scriptdir
$(error scriptdir not defined)
endif

BUILD_VERBOSITY := 1
ifeq ($(origin V),command line)
  BUILD_VERBOSITY := $(V)
endif
ifneq ($(findstring s,$(MAKEFLAGS)),)
  BUILD_VERBOSITY := 0
endif

export pkglibdir	:= $(libdir)/$(PACKAGE)
export pkgincludedir	:= $(includedir)/$(PACKAGE)
export pkgdatadir	:= $(datadir)/$(PACKAGE)
export install_log	:= $(top_builddir)/install.log
export BUILD_VERBOSITY

MAKEFLAGS	+= --no-print-directory

include $(scriptdir)/sub.mk

# NOTE: $restricted is defined in sub.mk

ifeq ($(restricted),0)
# topdir make

uninstall:
	@if [[ -f $(install_log) ]]; \
	then \
		sort $(install_log) | uniq > $(install_log).tmp || exit 1; \
		mv $(install_log).tmp $(install_log) || exit 1; \
		exec < $(install_log) || exit 1; \
		while read line; \
		do \
			echo "   RM     $$line"; \
			rm $$line || exit 1; \
		done; \
		rm $(install_log); \
	else \
		echo "Nothing to uninstall"; \
	fi

dist:
	@$(scriptdir)/dist $(top_srcdir) $(PACKAGE) $(VERSION)

ifeq ($(top_srcdir),$(top_builddir))
dist: clean
endif

else
# subdir make

uninstall dist:
	@echo "can't make $@ in a subdir" >&2
	@/bin/false

endif

do-help:
	@echo "Main targets:"
	@echo "  all                 same as build (this is the default target)"
	@echo "  build               build main targets"
	@echo "  install             install main targets"
	@echo "  install-exec        install main targets (only executables)"
	@echo "  install-data        install main targets (only data)"
	@echo
	@echo "Extra targets"
	@echo "  extra               same as extra-build"
	@echo "  extra-build         build extra targets"
	@echo "  extra-install       install extra targets"
	@echo "  extra-install-exec  install extra targets (only executables)"
	@echo "  extra-install-data  install extra targets (only data)"
	@echo
	@echo "Cleaning targets:"
	@echo "  clean               remove files generated by make"
	@echo "  distclean           remove files generated by make and configure"
	@echo
	@echo "Other targets:"
	@echo "  uninstall           remove all files listed in 'install.log'"
	@echo "  dist                build \$$DISTDIR/$(PACKAGE)-$(VERSION).tar.bz2 file"
	@echo "  tags                generate tags (requires ctags)"
	@echo "  help                show this help"
	@echo
	@echo "Build verbosity:"
	@echo "  make V=0            quiet build"
	@echo "  make V=1            beautified build (default)"
	@echo "  make V=2            verbose build"
	@echo "  make -s             same as 'make V=0'"

local-help:

help: do-help local-help

tags:
	@if [[ -z "$(currelpath)" ]]; \
	then \
		if cd $(top_srcdir); \
		then \
			[[ $(BUILD_VERBOSITY) -gt 0 ]] && echo "   TAGS   [global]"; \
			$(CTAGS) --file-scope=no --languages="$(ctags-languages)" -R $(ctags-dirs); \
		fi; \
		dirs="$(ctags-dirs)"; \
		for dir in $$dirs; \
		do \
			if cd $(top_srcdir)/$$dir; \
			then \
				[[ $(BUILD_VERBOSITY) -gt 0 ]] && echo "   TAGS   $$dir/"; \
				[[ -n $$(ls) ]] && $(CTAGS) --languages="$(ctags-languages)" *; \
			fi; \
		done; \
	else \
		if [[ -z "$(filter $(currelpath),$(ctags-dirs))" ]]; \
		then \
			echo $(currelpath) is not in ctags-dirs; \
		else \
			if cd $(top_srcdir)/$(currelpath); \
			then \
				[[ $(BUILD_VERBOSITY) -gt 0 ]] && echo "   TAGS   $(currelpath)/"; \
				[[ -n $$(ls) ]] && $(CTAGS) --languages="$(ctags-languages)" *; \
			fi; \
		fi; \
	fi

.PHONY: do-help help local-help uninstall tags dist
